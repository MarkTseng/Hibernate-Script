#!/usr/bin/python

import libxml2
import sys, string, time, os

download_dir = '/var/web/www/htdocs/downloads/all/'
download_url_prefix = '/downloads/all/'
download_info_file = 'downloads.xml'
download_index_snippet = 'index-download-snippet.html'

# For our external HTML snippets
latest = {}
for i in ['2.6','2.4','dev']:
	latest[i] = []
	latest[i].append('')
	latest[i].append('<li><i>There are currently no patches in this section.</i>')
latest['dev'][1] = '<li><i>There have not yet been any development patches since the last stable release.</i>'

def getFileInfo(filename):
	try:
		sb = os.stat('%s/%s'%(download_dir, filename))
	except OSError:
		sys.stderr.write("ERROR: Failed to find %s in %s\n"%(filename, \
			download_dir))
		sys.exit(1)
	
	size = sb[6]
	epochtime = sb[8] # modification time
	date = time.strftime('%e %B %Y', time.localtime(epochtime))
	return (date, size)

def isLowerVersion(a, b):
	while True:
		try:
			a1 = a[0:a.index('.')]
			a = a[a.index('.')+1:]
		except ValueError:
			a1 = a
			a = ''
		
		try:
			b1 = b[0:b.index('.')]
			b = b[b.index('.')+1:]
		except ValueError:
			b1 = b
			b = ''
		
		if a1 == '' and b1 != '': return True
		if a1 == '' and b1 == '': return False
		if b1 == '': return False
		if int(a1) > int(b1): return False
		if int(a1) < int(b1): return True

# def testVersion(a, b, c):
# 	d = isLowerVersion(a, b)
# 	res = ''
# 	if c == d:
# 		res = 'PASS'
# 	else:
# 		res = 'FAIL'
# 	print "%s: %s < %s : %s"%(res, a, b, str(d))
# 
# testVersion("1", "2", True)
# testVersion("2", "1", False)
# testVersion("1.1", "1.2", True)
# testVersion("1.1", "1.0", False)
# testVersion("1.1", "2.0", True)
# testVersion("1.1", "2", True)
# testVersion("1", "2.0", True)
# testVersion("1.1.2", "1.1.2", False)
# testVersion("1.1.2", "1.1.3", True)
# testVersion("1.1.2", "1.1.1", False)
# testVersion("1.1.2", "1.2.1", True)
# testVersion("1.1.2", "1.0.1", False)
# testVersion("1.1.2", "0.0.1.1", False)
# testVersion("2.1.5.7C", "2.1.5.6", False)
# sys.exit(3)

def indexUpdateSnippet(release_ver, kernel_ver, url):
	parts = string.count(release_ver, '.')+1
	part = None
	if parts >= 4: # we have a dev version
		part = 'dev'
	if kernel_ver[0:3] in ['2.4', '2.6']:
		part = kernel_ver[0:3]
	if part == None:
		return

	if latest[part][0] == '' or isLowerVersion(release_ver, latest[part][0]):
		latest[part][0] = release_ver
		latest[part][1] = ''

	if latest[part][0] == release_ver:
		latest[part][1] += '<li><a href="%s">Software Suspend %s for kernel %s</a>\n'%(url, release_ver, kernel_ver)

def parseKernel(kernel, release_name):
	version = kernel.prop('name')

	filename = kernel.children
	while filename is not None and filename.name != 'filename':
		filename = filename.next
	if filename is None:
		filename = 'software-suspend-%s-for-%s.tar.bz2' % \
			(release_name, version)
	elif filename.name == 'filename':
		filename = filename.content.strip()
	else:
		raise Exception("Something odd happened here!")

	link = '<a href="%s%s">%s</a>'%(download_url_prefix, filename, filename)

	(date, size) = getFileInfo(filename)

	indexUpdateSnippet(release_name, version, download_url_prefix+filename)

	return '''
<tr class="download_kernel"><td class="download_kernel" colspan="3">%s</td></tr>
<tr class="download_file">
 <td class="download_file">%s</td>
 <td class="download_file">%s</td>
 <td class="download_file">%s</td>
</tr>
'''%(version, link, date, size)

def parseRelease(release):
	date = None
	part = release.children
	release_name = release.prop('name')
	release_text = '''
<tr class="download_release"><td class="download_release" colspan="3">%s</td></tr>
'''%(release_name)

	while part is not None:
		if part.name == 'date':
			date = part.content
		elif part.name == 'kernel':
			release_text += parseKernel(part, release_name)
		part = part.next

	return release_text

def parseSection(section):
	release = section.children
	release_text = ''
	while release is not None:
		if release.name != 'release':
			release = release.next
			continue
		release_text += parseRelease(release)
		release = release.next

	section_text = '''
<tr class="download_section"><td class="download_section" colspan="3">%s</td></tr>
'''%(section.prop('name'))
	if release_text == '':
		release_text = '''
<ul>
<i>There are currently no downloads in this section.</i>
</ul>
'''
	return section_text+release_text

def parseDownloads(f):
	xmldoc = libxml2.parseFile(download_info_file)

	root = xmldoc.children
	if root.name != 'downloads':
		sys.stderr.write(
	'''This doesn't seem like a valid XML file to generate a download page from.\n''')
		sys.exit(1)

	section = root.children
	text = '''
<table width="100%">
<tr class="download_header"><th>Filename</th><th>Release Date</th><th>File size</th></tr>
'''
	while section is not None:
		if section.name != 'section':
			section = section.next
			continue
		text += parseSection(section)
		section = section.next
	text += '''
</table>
'''
	return text

print '''TITLE=Software Suspend - Download

<h1>###TITLE###</h1>

<p>Below is a list of the latest stable and development versions of Software Suspend,
along with the latest Hibernate Script. For older downloads, you may wish to
consult the <a href="all/">Older Downloads</a> section.</p>

'''

print parseDownloads(sys.stdin)
index_snippet = file(download_index_snippet, 'w')
index_snippet.write('''
<p><b>Latest stable version for 2.6 kernels:</b> %s</p>
<ul>
%s
</ul>
<p><b>Latest stable version for 2.4 kernels</b><sup><a href="#final24release">Note</a></sup>: %s</p>
<ul>
%s
</ul>
<hr>
<p><b>Latest development version:</b> %s</p>
<ul>
%s
</ul>
<p><b>Note:</b> See the <a href="http://bugzilla.suspend2.net/">Bugzilla</a>
page for known bugs with these patches.
</ul>

<p>These patches are released against the current kernel version, and regularly
updated. They may contain bugs, and you are encouraged to report them into
<a href="http://bugzilla.suspend2.net/">Bugzilla</a>.
''' % (latest['2.6'][0], latest['2.6'][1], latest['2.4'][0], latest['2.4'][1], latest['dev'][0], latest['dev'][1]))
index_snippet.close()

