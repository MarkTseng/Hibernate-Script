# -*- sh -*-
# vim:ft=sh:ts=8:sw=4:noet

AddConfigHandler FilesystemsOptions
AddConfigHelp "Unmount <mount point or device> [...]" "If you have network shares or external devices that should be unmounted before suspending, list them here."
AddConfigHelp "Mount <mount point or device> [...]" "If you have network shares or external devices that should be mounted after resuming, list them here."
AddConfigHelp "UnmountFSTypes <filesystem type> [...]" "Unmounts any filesystems of the given types. This is most useful for network filesystems such as smbfs and nfs."
AddConfigHelp "UnmountGraceTime <seconds>" "Time between sending SIGTERM to processes and SIGKILL to allow them to cleanup gracefully.. The default is 1 second."

FS_UNMOUNT_GRACE=1

FilesystemsUnmount() {
    [ -z "$FS_UNMOUNTS" ] && return 0
    FilesystemsUnmountReal $FS_UNMOUNTS
    # exit status preserved.
}

FilesystemsUnmountReal() {
    local mnt
    local ret
    local needsleep

    needsleep=0

    # Send TERM to processes first
    if [ x"$KILL_PROGRAMS" = "x1" ] ; then
	for mnt in $* ; do
	    if ! awk '($2 == "'$mnt'"){exit 1}' /proc/mounts ; then
		vecho 1 "Sending SIGTERM to processes using $mnt..."
		fuser -s -k -15 $mnt
		fuser -s $mnt && needsleep=1
	    fi
	done
    fi

    [ "$needsleep" -eq 1 ] && sleep $FS_UNMOUNT_GRACE

    # Send KILL to processes and unmount
    ret=0
    for mnt in $* ; do
	if ! awk '($2 == "'$mnt'"){exit 1}' /proc/mounts ; then
	    if [ x"$KILL_PROGRAMS" = "x1" ] ; then
		vecho 1 "Sending SIGKILL to processes using $mnt..."
		fuser -s -k -9 $mnt
	    fi
	    vecho 1 "Unmounting $mnt ..."
	    umount $mnt || ret=1
	fi
    done
    return $ret
}

FSTypesUnmount() {
    local fstype
    local ret

    [ -z "$FS_TYPES" ] && return 0
    ret=0

    for fstype in $FS_TYPES ; do
	local unmounts
	unmounts=`awk '($3 == "'$fstype'") {print $2}' /proc/mounts | sort -r`
	[ -z "$unmounts" ] && continue
	vecho 2 "Filesystems of type \"$fstype\" to unmount: $unmounts"
	FilesystemsUnmountReal $unmounts || ret=$?
    done
    return $ret
}

FilesystemsMount() {
    local mnt
    local ret
    [ -z "$FS_MOUNTS" ] && return 0

    ret=0
    for mnt in $FS_MOUNTS ; do
	vecho 1 "Mounting $mnt ..."
	mount $mnt || ret=1
    done
    return $ret
}

FilesystemsOptions() {
    case $1 in
	unmount)
	    [ -z "$FS_UNMOUNTS" ] && AddSuspendHook 50 FilesystemsUnmount
	    shift
	    FS_UNMOUNTS="$FS_UNMOUNTS $@"
	    ;;
	unmountfstypes)
	    [ -z "$FS_TYPES" ] && AddSuspendHook 45 FSTypesUnmount
	    shift
	    FS_TYPES="$FS_TYPES $@"
	    ;;
	unmountgracetime)
	    case $2 in
		*[!0-9.]*)
		    vecho 0 "UnmountGraceTime not numeric (expecting number of seconds)"
		    ;;
		*)
		    FS_UNMOUNT_GRACE=$2
		    ;;
	    esac
	mount)
	    [ -z "$FS_MOUNTS" ] && AddResumeHook 50 FilesystemsMount
	    shift
	    FS_MOUNTS="$FS_MOUNTS $@"
	    ;;
	*)
	    return 1
    esac
    return 0
}

# $Id$
