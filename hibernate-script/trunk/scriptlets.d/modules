# -*- sh -*-
# vim:ft=sh:ts=8:sw=4:noet

AddConfigHandler ModulesOptions
AddConfigHelp "UnloadModules <module name> [...]" "Names of modules to unload prior to suspending."
AddConfigHelp "LoadModules auto|<module name> [...]" "Names of modules to load after resumimg. If auto is specified, the modules that were unloaded previously are loaded."
AddConfigHelp "UnloadAllModules <boolean>" "Try to remove all modules loaded prior to suspending."
AddConfigHelp "LoadModulesFromFile <filename>" "Load default modules after resuming from a given filename. Each module name must appear on it's own line, and line starting with # are ignored. (eg, Debian's /etc/modules, Gentoo's /etc/modules.autoload)"

CheckModuleSupport() {
    [ -f "/proc/modules" ] && return 0
    vecho 1 "Kernel does not have module support compiled in! Module functions disabled."
    return 1
}

# SaveKernelModprobe disables module loading while suspending, by setting
# the kernel's modprobe to /bin/true, and saving the old value.
SaveKernelModprobe() {
    [ -n "$KERNEL_MODPROBE" ] && return 0
    [ -f "/proc/sys/kernel/modprobe" ] || return 0
    KERNEL_MODPROBE="`cat /proc/sys/kernel/modprobe`"
    echo "/bin/true" > /proc/sys/kernel/modprobe
    vecho 3 "Saved /proc/sys/kernel/modprobe is $KERNEL_MODPROBE"
    return 0
}

RestoreKernelModprobe() {
    [ -z "$KERNEL_MODPROBE" ] && return 0
    echo $KERNEL_MODPROBE > /proc/sys/kernel/modprobe
    unset KERNEL_MODPROBE
    return 0
}

ModulesUnload() {
    [ -z "$MOD_UNLOAD" ] && return 0
    CheckModuleSupport || return 0
    local mod
    local ret
    MOD_UNLOADED=""
    ret=0
    for mod in $MOD_UNLOAD ; do 
	vecho 1 -n "Unloading module $mod... "

	if ! grep -q "^$mod " /proc/modules ; then
	    vecho 1 "not loaded."
	    continue
	fi

	if modprobe -r $mod > /dev/null 2>&1 ; then
	    vecho 1
	else
	    ret=1
	    vecho 1 "failed!"
	fi
	# It's possible that the module was unloaded anyway (eg, if it Ctrl+C'd)
	MOD_UNLOADED="$MOD_UNLOADED $mod"
    done
    return $ret
}

ModulesLoad() {
    [ -z "$MOD_LOAD" ] && return 0
    CheckModuleSupport || return 0
    local mod
    for mod in $MOD_LOAD ; do 
	if [ "$mod" = "auto" ] ; then
	    for mod in $MOD_UNLOADED ; do 
		vecho 1 "Loading module $mod (from auto)..."
		modprobe $mod
	    done
	    continue
	fi
	vecho 1 "Loading module $mod..."
	modprobe $mod
    done
    return 0
}

ModulesUnloadAllOnce() {
    local module
    for module in `awk '($3==0){print $1}' /proc/modules` ;do
	vecho 1 "Unloading module $module..."
	modprobe -r $module
    done
}

ModulesUnloadAll() {
    [ x"$MODULES_UNLOADALL" = "x1" ] || return 1
    CheckModuleSupport || return 0

    local modbefore
    local modafter
    local mod_retry_count

    # read from /proc/modules which modules are loaded
    modbefore="`awk '($3==0){print $1}' /proc/modules`"
    ModulesUnloadAllOnce
    modafter="`awk '($3==0){print $1}' /proc/modules`"

    # check which are still loaded and retry until nothing changes
    mod_retry_count=0
    while [ "$modafter" != "$modbefore" ] ; do
	modbefore="$modafter"

	# Some sleep implementations might not support decimal sleep values:
	sleep 0.2 > /dev/null 2>&1 ; [ $? -ne 0 -a $? -ne 130 ] && sleep 1

	ModulesUnloadAllOnce
	modafter="`awk '($3==0){print $1}' /proc/modules`"
	[ "$mod_retry_count" -gt 5 ] && break
	[ -z "$modafter" ] && return 0
	mod_retry_count=$(($mod_retry_count+1))
    done

    vecho 1 "Some modules failed to unload: "`awk '{print $1}' /proc/modules`
    return 0
}

ModulesLoadFromFile() {
    [ -n "$MODULES_FROMFILE" ] || return 0
    [ -f "$MODULES_FROMFILE" ] || return 0
    CheckModuleSupport || return 0
    
    local MOD
    local args
    # Loop over every line in given file.
    vecho 1 "Loading modules listed $MODULES_FROMFILE" 
    while : ; do
	read MOD args
	[ $? -ne 0 ] && [ -z "$MOD" ] && break
	case "${MOD}" in
	    \#*|"") continue ;;
	esac
	vecho 1 "Loading $MOD" 
	modprobe ${MOD} ${args}
    done < $MODULES_FROMFILE

    return 0
}


ModulesOptions() {
    case $1 in
	unloadmodules)
	    [ -z "$MOD_UNLOAD" ] && AddSuspendHook 90 ModulesUnload
	    shift
	    MOD_UNLOAD="$MOD_UNLOAD $@"
	    ;;
	loadmodules)
	    [ -z "$MOD_LOAD" ] && AddResumeHook 90 ModulesLoad
	    shift
	    MOD_LOAD="$MOD_LOAD $@"
	    ;;
	unloadallmodules)
	    if BoolIsOn "$1" "$2" ; then
		MODULES_UNLOADALL=1
		AddSuspendHook 91 ModulesUnloadAll
	    fi
	    ;;
	loadmodulesfromfile)
	    if [ -z "$MODULES_FROMFILE" ] ; then
		MODULES_FROMFILE="$2"
		AddResumeHook 91 ModulesLoadFromFile
	    fi
	    ;;
	*)
	    return 1
    esac
    if [ -z "$MODPROBE_HOOKED" ] ; then
	AddSuspendHook 89 SaveKernelModprobe
	AddResumeHook 92 RestoreKernelModprobe
	MODPROBE_HOOKED=1
    fi
    return 0
}

# $Id$
