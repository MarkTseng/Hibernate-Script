# -*- sh -*-
# vim:ft=sh:ts=8:sw=4:noet

AddConfigHandler USuspendConfigEnabler
AddOptionHandler USuspendOptionHandler

AddConfigHelp "USuspendMethod <disk|ram|both>" "Enables use of the uswsusp suspend method of newer kernels (>= 2.6.17rc1)"
AddConfigHelp "USuspendRamForce <boolean>" "Passes the -f flag to s2ram to force suspending even if the machine is not recognised"
AddConfigHelp "USuspendRamVbeSave <boolean>" "Passes the -s flag to s2ram to save VBE state before suspending and restore after resume"
AddConfigHelp "USuspendRamVbePost <boolean>" "Passes the -p flag to s2ram to VBE POST the graphics card after resume"

AddShortOption "n"
AddLongOption "no-suspend"

USUSPEND_STATE_FILE=/sys/power/state
USUSPEND_DEVICE=/dev/snapshot
USUSPEND_PROG=s2disk
USUSPEND_RAM_FORCE=0
USUSPEND_RAM_VBESAVE=0
USUSPEND_RAM_VBEPOST=0

USuspendConfigEnabler() {
    case "$1" in
	ususpendmethod)
	    case "$2" in
		disk|both) USUSPEND_PROG=s2$2;;
		ram)
		    USUSPEND_PROG=s2ram
		    ;;
		*)
		    vecho 1 "$EXE: Invalid value fo USuspendMethod."
		    return 2
		    ;;
	    esac

	    if [ -n "$NO_COMPLAIN_UNSUPPORTED" ] ; then
		# Just bail silently if we don't detect it.
		if ! test -f $USUSPEND_STATE_FILE || ! test -c $USUSPEND_DEVICE ||
		    ! command -v $USUSPEND_PROG > /dev/null 2>&1 ; then
		    return 0
		fi
	    fi
	    ;;

	ususpendramforce)
	    BoolIsOn "$1" "$2" && USUSPEND_RAM_FORCE=1 || return 0
	    ;;
	ususpendramvbesave)
	    BoolIsOn "$1" "$2" && USUSPEND_RAM_VBESAVE=1 || return 0
	    ;;
	ususpendramvbepost)
	    BoolIsOn "$1" "$2" && USUSPEND_RAM_VBEPOST=1 || return 0
	    ;;
	    
	*) return 1;;
    esac

    if [ -z "$USUSPEND_HOOKED" ]; then
	UsingSuspendMethod ususpend
	AddSuspendHook 10 EnsureUSuspendCapable
	AddSuspendHook 99 DoUSuspend
	USUSPEND_HOOKED=1
    fi
    return 0
}

USuspendOptionHandler() {
    [ -z "$USUSPEND_HOOKED" ] && return 1
    case $1 in
	-n|--no-suspend)
	    USUSPEND_NO_SUSPEND=1
	    ;;
	*)
	    return 1
    esac
    return 0
}

DoUSuspend() {
    if [ -z "$USUSPEND_NO_SUSPEND" ] ; then
	vecho 1 "$EXE: Running $USUSPEND_PROG_PATH ${FORCE:+$FORCE }..."
	ARGS=
	if [ "$USUSPEND_PROG" = s2ram ]; then
	    [ $USUSPEND_RAM_FORCE -eq 1 ] && ARGS="$ARGS -f"
	    [ $USUSPEND_RAM_VBESAVE -eq 1 ] && ARGS="$ARGS -s"
	    [ $USUSPEND_RAM_VBEPOST -eq 1 ] && ARGS="$ARGS -p"
	fi
	$USUSPEND_PROG_PATH $ARGS 2>&1 | vcat 2 \
	    || vecho 0 "$EXE: $USUSPEND_PROG_PATH failed."
    else
	vecho 1 "$EXE: Not actually suspending (--no-suspend given)."
    fi
    return 0
}

EnsureUSuspendCapable() {
    if ! USUSPEND_PROG_PATH=$(command -v $USUSPEND_PROG) ; then
	vecho 0 "$USUSPEND_PROG not installed."
	return 2
    fi
    if [ "$USUSPEND_PROG" = s2ram ] && [ $USUSPEND_RAM_FORCE -eq 0 ] \
	    && ! $USUSPEND_PROG -n >/dev/null; then
	vecho 0 "$USUSPEND_PROG: unknown machine, see s2ram(8) and the USuspendRamForce option"
	return 2
    fi
    if ! test -f $USUSPEND_STATE_FILE ; then
	vecho 0 "Your kernel does not have power management built in."
	return 2
    fi
    if ! test -c $USUSPEND_DEVICE ; then
	vecho 0 "$USUSPEND_DEVICE device not found."
	return 2
    fi

    return 0
}

# $Id$
