# -*- sh -*-
# vim:ft=sh:ts=8:sw=4:noet

AddConfigHandler XosdOptions
AddConfigHelp "Xosd <boolean>" "Showing script progress using xosd, X on-screen display."
AddConfigHelp "XosdSettings <options>" "Options to pass to osd_cat, see 'man osd_cat' (default is --font -misc-fixed-medium-r-semicondensed--*-120-*-*-c-*-*-* --colour=Green --shadow 1 --pos bottom --align center --offset 50)"
AddConfigHelp "XosdSuspendText" "Text to display on X on-screen display when suspending (default is \"Preparing to suspend\")"
AddConfigHelp "XosdResumeText" "Text to display on X on-screen display when resumed (default is \"Resuming from suspend\")"

# default osd_cat options
XOSD_SETTINGS="--font -misc-fixed-medium-r-semicondensed--*-120-*-*-c-*-*-* --colour=Green --shadow 1 --pos bottom --align center --offset 50"

# default suspend text
XOSD_SUSPEND_TEXT="Preparing to suspend..."

# default resume text
XOSD_RESUME_TEXT="Resuming from suspend..."

XosdProgress() {
    if [ x"$USE_XOSD" = "x1" ] ; then
	local new_osd_cat
	XOSD_PROGRESS=$(($XOSD_PROGRESS+10));
	# osd_cat needs to be backgrounded
	osd_cat ${XOSD_SETTINGS} --barmode=percentage --percentage=$XOSD_PROGRESS --text "$XOSD_TEXT" &
	OSD_CAT_PIDS="$OSD_CAT_PIDS $!"
	disown
    fi
    return 0
}

XosdInit() {
    [ x"$USE_XOSD" != "x1" ] && return 0

    # check if osd_cat exists
    if ! which osd_cat > /dev/null 2>&1 ; then
	USE_XOSD=0
	vecho 1 "'osd_cat' utility not found. Xosd disabled."
	return 1
    fi

    # determine DISPLAY, XAUTHORITY
    local xpid
    for xpid in `pidof X XFree86` ; do
	local xdisp xauth xhome
	xdisp=`awk 'BEGIN{RS="\\000";FS="="}($1 == "DISPLAY"){print $2}' < /proc/$xpid/environ`
	xauth=`awk 'BEGIN{RS="\\000";FS="="}($1 == "XAUTHORITY"){print $2}' < /proc/$xpid/environ`
	if [ -z "$xauth" ] ; then
	    xhome=`awk 'BEGIN{RS="\\000";FS="="}($1 == "HOME"){print $2}' < /proc/$xpid/environ`
	    xauth="$xhome/.Xauthority"
	fi

	vecho 2 "Using display $xdisp and authority file $xauth for osd_cat"
	export DISPLAY=$xdisp
	export XAUTHORITY=$xauth
    done

    if [ -z "$DISPLAY" ] ; then
	vecho 0 "Could not determine DISPLAY, Xosd disabled."
	USE_XOSD=0
	return 0
    fi
    if [ -z "$XAUTHORITY" ] ; then
	vecho 0 "Could not determine XAUTHORITY, Xosd disabled."
	USE_XOSD=0
	return 0
    fi
}

XosdBegin() {
    [ x"$USE_XOSD" != "x1" ] && return 0

    OSD_CAT_PIDS=
    XOSD_PROGRESS=0
    XosdProgress

    return 0
}

XosdOff() {
    [ x"$USE_XOSD" != "x1" ] && return 0

    [ -n "$OSD_CAT_PIDS" ] && kill $OSD_CAT_PIDS > /dev/null 2>&1
    OSD_CAT_PIDS=
    return 0
}

XosdStartSuspend() {
    XOSD_TEXT=$XOSD_SUSPEND_TEXT
    XosdBegin
}

XosdStartResume() {
    XOSD_TEXT=$XOSD_RESUME_TEXT
    XosdBegin
}

XosdOptions() {
    case $1 in
	xosd)
	    BoolIsOn "$1" "$2" && USE_XOSD=1 || return 0
	    ;;
	xosdsettings)
            shift
	    XOSD_SETTINGS="$@"
	    return 0
	    ;;
	xosdsuspendtext)
            shift
	    XOSD_SUSPEND_TEXT="$@"
	    return 0
	    ;;
	xosdresumetext)
            shift
	    XOSD_RESUME_TEXT="$@"
	    return 0
	    ;;
	*)
	    return 1
    esac

    XosdInit
    if [ -z "$XOSD_HOOKED" ] && [ x"$USE_XOSD" = "x1" ] ; then
	# in call order
	AddSuspendHook 05 XosdStartSuspend
	AddSuspendHook 20 XosdProgress
	AddSuspendHook 30 XosdProgress
	AddSuspendHook 40 XosdProgress
	AddSuspendHook 50 XosdProgress
	AddSuspendHook 60 XosdProgress
	AddSuspendHook 70 XosdProgress
	AddSuspendHook 80 XosdProgress
	AddSuspendHook 90 XosdProgress
	AddSuspendHook 95 XosdProgress
        AddSuspendHook 98 XosdOff
	AddResumeHook 95 XosdStartResume
	AddResumeHook 90 XosdProgress
	AddResumeHook 80 XosdProgress
	AddResumeHook 70 XosdProgress
	AddResumeHook 60 XosdProgress
	AddResumeHook 50 XosdProgress
	AddResumeHook 40 XosdProgress
	AddResumeHook 30 XosdProgress
	AddResumeHook 20 XosdProgress
	AddResumeHook 15 XosdProgress
        AddResumeHook 05 XosdOff
	XOSD_HOOKED=1
    fi

    return 0
}
